Problem:
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]
The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]
The median is (2 + 3)/2 = 2.5

Thoughts:
length of nums1 = m
length of nums2 = n
Brute force
Two pointers & traverse
  int[m+n]
  O(m+n)
  nums = [1,2,3]
  Binary Search
    median = 2
    O(log(m+n))
  Time complexity: O(m+n)
  Space complexity: O(m+n)

 two pointers
  index of mid:
    length % 2 == 0: length/2 ; length/2 + 1 [average]
    length % 2 != 0: length/2 + 1
    findK[median](nums1, nums2, k) {
      m = 0 nums2[k-1]
      n = 0 nums1[k-1]

      start= min
      end = max

      binary Search
      mid
      sum of smallorEqual(mid) nums1 & nums2 < k
        start = mid
      end = mid

      if (sum of smallorEqual(start) nums1 & nums2 >= k)
        return start
      return end
    }

  Time complexity: O(log(m+n))
  Space complexity: O(1)


  divide and conquer:
  if (start1 >= nums1.length) {
      return nums2[start2 + k - 1];
  }

  if (start2 >= nums2.length) {
      return nums1[start1 + k - 1];
  }

  if (k == 1) {
      return Math.min(nums1[start1], nums2[start2]);
  }

  int half1 = start1 + k / 2 - 1 < nums1.length
      ? nums1[start1 + k / 2 - 1]
      : Integer.MAX_VALUE;
  int half2 = start2 + k / 2 - 1 < nums2.length
      ? nums2[start2 + k / 2 - 1]
      : Integer.MAX_VALUE;

  if (half1 < half2) {
      return findKth(nums1, start1 + k / 2, nums2, start2, k - k / 2);
  } else {
      return findKth(nums1, start1, nums2, start2 + k / 2, k - k / 2);
  }

  Time complexity: O(log(m+n))
  Space complexity: O(1)
