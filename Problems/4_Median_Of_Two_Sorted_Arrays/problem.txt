Problem:
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]
The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]
The median is (2 + 3)/2 = 2.5

Thoughts:
length of nums1 = m
length of nums2 = n
Brute force
Two pointers & traverse
  int[m+n]
  O(m+n)
  nums = [1,2,3]
  nums[1] = 2
  Time complexity: O(m+n)
  Space complexity: O(m+n)

 two pointers
  index of mid:
    length % 2 == 0: length/2 ; length/2 + 1 [average]
    length % 2 != 0: length/2 + 1
    findK[median](nums1, nums2, k) {
      m = 0 nums2[k-1]
      n = 0 nums1[k-1]

      start= min
      end = max

      binary Search
      mid
      sum of smallorEqual(mid) nums1 & nums2 < k
        start = mid
      end = mid

      if (sum of smallorEqual(start) nums1 & nums2 >= k)
        return start
      return end
    }

  Time complexity: O(log(m+n))
  Space complexity: O(1)


  divide and conquer:
  if (start1 >= nums1.length) {
      return nums2[start2 + k - 1];
  }

  if (start2 >= nums2.length) {
      return nums1[start1 + k - 1];
  }

  if (k == 1) {
      return Math.min(nums1[start1], nums2[start2]);
  }

  int half1 = start1 + k / 2 - 1 < nums1.length
      ? nums1[start1 + k / 2 - 1]
      : Integer.MAX_VALUE;
  int half2 = start2 + k / 2 - 1 < nums2.length
      ? nums2[start2 + k / 2 - 1]
      : Integer.MAX_VALUE;

  if (half1 < half2) {
      return findKth(nums1, start1 + k / 2, nums2, start2, k - k / 2);
  } else {
      return findKth(nums1, start1, nums2, start2 + k / 2, k - k / 2);
  }

  Time complexity: O(log(m+n))
  Space complexity: O(1)

Another Thoughts Route:
Brute Force:
  1. combine two arrays (small -> large) => one sorted arrays
  2. median:
    nums1&nums2:
    even: C0 C1 C2 ... C(l3/2 - 1) C(l3/2) ... C(l3-1)
    median: (C[(l3-1)/2] + C[length/2]) / 2
    odd:  C0 C1 C2 ... C(l3/2 - 1) C(l3/2) ... C(l3-1)
    median: C[length/2]

  Time complexity: O(m+n)
  Space complexity: O(m+n)

Requirement: The overall run time complexity should be O(log(m+n))
===> Binary Search
  Go through only one time
  nums1&nums2:
  even: C0 C1 C2 ... C((l3-1)/2) C(l3/2) ... C(l3-1)
  median: (C[(l3-1)/2] + C[length/2]) / 2
  odd:  C0 C1 C2 ... C(l3/2 - 1) C(l3/2) ... C(l3-1)
  median: C[length/2]

  How to find k without combine two arrays?
  nums1: A0 A1 A2 ... A(m1-1) A(m1) .... A(l1-1)
  nums2: B0 B1 B2 ... B(m2-1) B(m2) .... B(l2-1)
  Corner case:
  nums1.length == 0;
  nums2.length == 0;
  Business logic
  start = min(A0, B0)
  end = max(A[l1-1], B[l2-1])
  nums1 & nums2 => int array
  while (start + 1 < end) {
    mid = start + (end - start) / 2
    if (countSmallerOrEqual(nums1, mid) + countSmallerOrEqual(nums2, mid) < k) {
      start = mid
    } else {
      end = mid
    }
  }
  Double check:
  if (countSmallerOrEqual(nums1, start) + countSmallerOrEqual(nums2, start) >= k) {
      return start;
  } else {
    return end;
  }

countSmallerOrEqual(nums, number) {
  start = 0
  end = length - 1
  // find first index arr[index] > number
  while (start + 1 < end) {
      int mid = start + (end - start) / 2;
      if (arr[mid] <= number) {
          start = mid;
      } else {
          end = mid;
      }
  }
  if (arr[start] > number) {
      return start;
  }

  if (arr[end] > number) {
      return end;
  }
  return length
}
