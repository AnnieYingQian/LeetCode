Problem:
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero,
except the number 0 itself.
Example
  Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
  Output: 7 -> 0 -> 8
  Explanation: 342 + 465 = 807.

Thoughts:
length of linkedlist1 = m
length of linkedlist2 = n
Brute force
  stringBuilder append, reverse
  =>
  int Integer x = Integer.valueOf(str);
  // or
  int y = Integer.parseInt(str);

  2 -> 4 -> 3 => 342
  5 -> 6 -> 4 => 465
  342 + 465 = 807
  7 -> 0 -> 8

  Time complexity: O(m+n+max(m, n))
  Space complexity: O(m+n+max(m, n))

Dummy nodes
  The pseudocode is as following:
  Initialize current node to dummy head of the returning list.
  Initialize carry to 0.
  Initialize p and q to head of l1 and l2 respectively.
  Loop through lists l1 and l2 until you reach both ends.
    Set x to node p's value. If p has reached the end of l1, set to 0.
    Set y to node q's value. If q has reached the end of l2, set to 0.
    Set sum = x + y + carry.
    Update carry = sum / 10.
    Create a new node with the digit value of (sum mod 10) and set it to current node's next, then advance current node to next.
    Advance both p and q.
  Check if carry = 1, if so append a new node with digit 1 to the returning list.
  Return dummy head's next node.

/** Two pointers p, q (x, y) 
Time Complexity = O(max(m, n));
Space Complexity = O(max(m, n)); max(m, n) + 1
Note: 1. carry for special case such as 9 + 9 = 18, carry = 1
      2. null -> 0
      3. out of loop, carry > 0, append 1
*/
