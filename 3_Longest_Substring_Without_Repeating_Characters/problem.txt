Problem:
Given a string,
find the length of the longest substring without repeating characters.
Examples:
Given "abcabcbb",
the answer is "abc", which the length is 3.
Given "bbbbb",
the answer is "b", with the length of 1.
Given "pwwkew",
the answer is "wke", with the length of 3.
Note that the answer must be a substring,
"pwke" is a subsequence and not a substring.

Thoughts:
Brute force
  define substring: head&tail or head&length
  string = abcabcbb
  length
  sub without repeating:
    a => n = 1
    b != a => n = 2
    c != a , c != b => n = 3
    a == a  return length = 3

    b => n = 1
    c != b => n = 2
    a != b, a != c => n = 3
    b == b return length = 3

    c => n = 1
    a != c => n = 2
    b != c b!= a => n = 3
    c == c return length = 3

    a => n = 1
    b != a => n = 2
    c != a , c != b => n = 3
    b != a, b == b return length = 3
    ...

  for (int i = 0, i < length, i++) {
    for (int j = i + 1, j < length, j++) {
      if (isUnique){
        length = max(length, j - i + 1)
      } else {
        break
      }
    }
  }

  Boolean isUnique (String s, int start, int end) {
    // find repeat use hashset O(n)
    for(int i = start, i < end + 1, i++) {
      Character ch = s.charAt(i)
      if (set.contains(ch)) return false
      set.add(ch)
    }
    return true
  }

  Time complexity: O(n^3)
  Space complexity: O(j-i+1)

Sliding window
  hashset check duplicate: amortized O(1)
  moving rule:
    unique: length + 1
    duplicate: head + 1
    use queue: FIFO

    Time complexity: O(n)
    Space complexity: O(n)

Optimization - Space
  Two pointers replace queue
  HashSet amortized O(1)
  array replace HashSet

  arr[i]   1  1
  i        a  b
  ASCII 128

  Time complexity: O(n)
  Space complexity: O(n)
                        ~ n is large O(1)
                        ~ n is small such as 10 O(n)
